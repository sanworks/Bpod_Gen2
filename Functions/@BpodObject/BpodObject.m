%{
----------------------------------------------------------------------------

This file is part of the Sanworks Bpod repository
Copyright (C) Sanworks LLC, Rochester, New York, USA

----------------------------------------------------------------------------

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3.

This program is distributed  WITHOUT ANY WARRANTY and without even the 
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
%}

% BpodObject is a class representing the Bpod behavior measurement system.
% Bpod() creates BpodSystem, an instance of BpodObject that is global and
% accessed by user code, and internally throughout the code base.
%
% User-facing fields and functions of BpodObject are documented on the wiki,
% at https://sanworks.github.io/Bpod_Wiki/function-reference/

classdef BpodObject < handle

    properties
        MachineType % 1 = Bpod 0.5, 2 = Bpod 0.7+, 3 = 2.X, 4 = 2+
        FirmwareVersion % An integer specifying the firmware on the connected device
        SerialPort % ArCOM serial port object
        AnalogSerialPort % On state machine r2+ or newer, this is a dedeicated USB serial port to handle analog data
        HW % Hardware description
        Modules % Connected UART serial module description
        ModuleUSB % Struct containing paired USB port name for each connected module, (e.g. ModuleUSB.ModuleName = 'COM3')
        Status % Struct with system status variables
        Path % Struct with paths to Bpod root folder and specific sub-folders
        Data % Struct storing all data collected in the current session. SaveBpodSessionData saves this to the current data file.
        FlexIOConfig % Struct with Flex I/O channel config (FSM 2+). Changes to this field are automatically synced to the device.
        AnalogDataFile % On Bpod FSM 2+ or newer, a memory-mapped MAT file containing analog data (see matfile() MATLAB docs)
        StateMatrix % Struct of matrices describing current (running) state machine
        StateMatrixSent % StateMatrix sent to the state machine, for the next trial. At run, this replaces StateMatrix.
        LastStateMatrix % Last state matrix completed. This is updated each time a trial run completes.
        HardwareState % Current state of I/O lines and serial codes
        StateMachineInfo % Struct with information about state machines (customized for connected hardware)
        GUIHandles % Struct with graphics handles
        GUIData % Struct with graphics data
        InputsEnabled % Struct storing input channels that are connected to something. This is modified from the settings menu UI.
        SyncConfig % Struct storing the sync channel and mode (modified from settings menu UI)
        PluginSerialPorts % Struct with serial port objects for plugins (modules)
        PluginFigureHandles % Struct with figure handles for plugins
        PluginObjects % Struct with plugin objects
        SystemSettings % Struct with miscellaneous system settings
        SoftCodeHandlerFunction % The path to a user m-file triggered by the state machine to run PC-side tasks (play video, etc.)
        ProtocolFigures % A struct of figure handles used by the current protocol. Figs are auto-closed when the session ends.
        ProtocolSettings % The settings struct selected by the user in the launch manager, when launching a protocol
        Emulator % A struct with the internal variables of the emulator (mirror of state machine workspace in Arduino)
        ManualOverrideFlag % Used in the emulator to indicate an override that needs to be handled
        VirtualManualOverrideBytes % Stores emulated event byte codes generated by manual override
        CalibrationTables % Struct for liquid, sound, etc.
        BlankStateMachine % Holds a blank state machine to use with AddState().
        ProtocolStartTime % The time when the current protocol was started.
        BonsaiSocket % An object containing a TCP/IP socket for communication with Bonsai
        EmulatorMode % 0 if actual device connected, 1 if emulator
        HostOS % Holds a string naming the host operating system (i.e. 'Microsoft Windows 10')
        Timers % A struct containing MATLAB timer objects
        LiveTimestamps % Set to 1 if a timestamp is sent with each event, 0 if sent after the trial is complete
    end

    properties (Access = private)
        CurrentFirmware % Struct of current firmware versions for state machine + curated modules
        SplashData % Splash screen frames
        LastHardwareState % Last known state of I/O lines and serial codes
        CycleMonitoring % 0 = off, 1 = on. Measures min and max actual hardware timer callback execution time
        IsOnline % 1 if connection to Internet is available, 0 if not
    end

    methods
        function obj = BpodObject
            % Constructor, run when creating an instance of BpodObject

            % Check path for duplicate Bpod installations
            matlabPath = path;
            nInstallations = length([strfind(matlabPath, 'Bpod_Gen2;') strfind(matlabPath, 'Bpod_Gen2-develop;')]);
            if nInstallations > 1
                error(['Duplicate Bpod_Gen2 folders found in the MATLAB path. ' char(10)...
                    'Please remove duplicates of Bpod_Gen2 and any duplicate subfolders before running Bpod.'])
            end

            % Add Bpod code to MATLAB path
            bpodPath = fileparts(which('Bpod'));
            addpath(genpath(fullfile(bpodPath, 'Assets')));
            rmpath(genpath(fullfile(bpodPath, 'Assets', 'BControlPatch', 'ExperPort')));
            addpath(genpath(fullfile(bpodPath, 'Examples', 'State Machines')));
            load BpodSplashData;
            if exist('rng','file') == 2
                rng('shuffle', 'twister'); % Seed the random number generator by CPU clock
            else
                rand('twister', sum(100*fliplr(clock))); % For older versions of MATLAB
            end

            % Notify the user of the installed software version
            bpodMeta = BpodLib.util.getBpodSoftwareMetadata();
            disp(['Starting Bpod Console v' bpodMeta.semanticVersion])
            disp(['    from:   ' fileparts(bpodMeta.BpodFilepath)])
            if ~isempty(bpodMeta.gitInfo)
            disp(['    branch: ' bpodMeta.gitInfo.branch])
            end

            % Check for Internet Connection
            obj.IsOnline = obj.check4Internet();

            % Validate software version
            if obj.IsOnline
                obj.ValidateSoftwareVersion();
            end

            % Initialize fields
            obj.LiveTimestamps = 0;
            obj.SplashData = SplashData;
            obj.Status.BpodStartTime = now;
            obj.Status = struct;
            obj.Status.Initialized = false;
            obj.Status.LastTimestamp = 0;
            obj.Status.CurrentStateCode = 0;
            obj.Status.LastStateCode = 0;
            obj.Status.CurrentStateName = '';
            obj.Status.LastStateName = '';
            obj.Status.LastEvent = 0;
            obj.Status.Live = 0;
            obj.Status.Pause = 0;
            obj.Status.InStateMatrix = 0;
            obj.Status.BeingUsed = 0;
            obj.Status.BpodStartTime = 0;
            obj.Status.CurrentProtocolName = '';
            obj.Status.CurrentSubjectName = '';
            obj.Status.SerialPortName = '';
            obj.Status.NewStateMachineSent = 0;
            obj.Status.SessionStartFlag = 0;
            obj.Status.AnalogViewer = 0;
            obj.Status.nAnalogSamples = 0;
            obj.Status.RecordAnalog = 1;

            % Initialize paths
            obj.Path = struct;
            obj.Path.BpodRoot = bpodPath;
            obj.Path.ParentDir = fileparts(bpodPath);
            obj.Path.LocalDir = fullfile(obj.Path.ParentDir, 'Bpod Local');
            obj.Path.SettingsDir = fullfile(obj.Path.LocalDir, 'Settings');
            obj.Path.Settings = '';
            obj.Path.DataFolder = '';
            obj.Path.CurrentDataFile = '';
            obj.Path.CurrentProtocol= '';
            obj.Path.InputConfig = fullfile(obj.Path.SettingsDir, 'InputConfig.mat');
            obj.Path.FlexConfig = fullfile(obj.Path.SettingsDir, 'FlexConfig.mat');
            obj.Path.SyncConfig = fullfile(obj.Path.SettingsDir, 'SyncConfig.mat');
            obj.Path.ModuleUSBConfig = fullfile(obj.Path.SettingsDir, 'ModuleUSBConfig.mat');

            % Initialize state machine info, to be populated in SetupStateMachine()
            obj.StateMachineInfo = struct;
            obj.StateMachineInfo.nEvents = 0; % Number of events the state machine can respond to
            obj.StateMachineInfo.EventNames = 0; % Cell array of strings with names for each event
            obj.StateMachineInfo.InputChannelNames = 0; % cell array of strings with names for input channels
            obj.StateMachineInfo.nOutputChannels = 0; % Number of output channels
            obj.StateMachineInfo.OutputChannelNames = 0; % Cell array of strings with output channel names
            obj.StateMachineInfo.MaxStates = 0; % Maximum number of states the attached Bpod can store

            % Ensure that settings, data, protocol and calibration folders exist
            if ~exist(obj.Path.LocalDir)
                mkdir(obj.Path.LocalDir);
            end
            if ~exist(obj.Path.SettingsDir)
                mkdir(obj.Path.SettingsDir);
            end
            addpath(genpath(obj.Path.SettingsDir));
            if exist('BpodSettings.mat') > 0
                load BpodSettings;
                obj.SystemSettings = BpodSettings;
            else
                obj.SystemSettings = struct;
            end
            obj.Path.ProtocolFolder = '';
            if isfield(obj.SystemSettings, 'ProtocolFolder')
                if exist(obj.SystemSettings.ProtocolFolder)
                    obj.Path.ProtocolFolder = obj.SystemSettings.ProtocolFolder;
                end
            end
            obj.Path.DataFolder = '';
            if isfield(obj.SystemSettings, 'DataFolder')
                if exist(obj.SystemSettings.DataFolder)
                    obj.Path.DataFolder = obj.SystemSettings.DataFolder;
                end
            end
            obj.Path.BcontrolRootFolder = '';
            if isfield(obj.SystemSettings, 'BcontrolRootFolder')
                if exist(obj.SystemSettings.BcontrolRootFolder) == 7
                    obj.Path.BcontrolRootFolder = obj.SystemSettings.BcontrolRootFolder;
                    ExperPortFolder = fullfile(obj.Path.BcontrolRootFolder, 'ExperPort');
                    if exist(ExperPortFolder) == 7
                        addpath(ExperPortFolder);
                    end
                end
            end

            % Get info about the PC
            obj.HostOS = system_dependent('getos');
            if ~isempty(strfind(obj.HostOS, 'Windows 7'))
                disp(['Bpod Startup: Windows 7 detected.' char(10)...
                    'Please consider updating to Windows 10 or 11 for improved stability.' char(10)])
            end

            % Verify calibration folder and copy example calibration if none exist
            % (so that users can validate the system and develop protocols before running calibration)
            calFolder = fullfile(obj.Path.LocalDir,'Calibration Files');
            if ~exist(calFolder)
                mkdir(calFolder);
                copyfile(fullfile(obj.Path.BpodRoot, 'Examples', 'Example Calibration Files'), calFolder);
                questdlg('Calibration folder created in /BpodLocal/. Replace example calibration files soon.', ...
                    'Calibration folder not found', ...
                    'Ok', 'Ok');
            end

            % Load liquid calibration
            try
                liquidCalibrationFilePath = fullfile(obj.Path.LocalDir, 'Calibration Files', 'LiquidCalibration.mat');
                load(liquidCalibrationFilePath);
                obj.CalibrationTables.LiquidCal = LiquidCal;
            catch
                obj.CalibrationTables.LiquidCal = [];
            end

            % Load sound calibration
            try
                soundCalibrationFilePath = fullfile(obj.Path.LocalDir, 'Calibration Files', 'SoundCalibration.mat');
                load(soundCalibrationFilePath);
                obj.CalibrationTables.SoundCal = SoundCal;
            catch
                obj.CalibrationTables.SoundCal = [];
            end

            % Load input channel settings
            if ~exist(obj.Path.InputConfig)
                copyfile(fullfile(obj.Path.BpodRoot, 'Examples', 'Example Settings Files', 'InputConfig.mat'), obj.Path.InputConfig);
            end
            load(obj.Path.InputConfig);
            obj.InputsEnabled = BpodInputConfig;

            % Load sync settings
            if ~exist(obj.Path.SyncConfig)
                copyfile(fullfile(obj.Path.BpodRoot, 'Examples',...
                    'Example Settings Files', 'SyncConfig.mat'), obj.Path.SyncConfig);
            end
            load(obj.Path.SyncConfig);
            obj.SyncConfig = BpodSyncConfig;

            % Create module USB port config file (if not present)
            if ~exist(obj.Path.ModuleUSBConfig)
                copyfile(fullfile(obj.Path.BpodRoot, 'Examples',...
                    'Example Settings Files', 'ModuleUSBConfig.mat'), obj.Path.ModuleUSBConfig);
            end

            % Load list of current firmware versions
            cf = CurrentFirmwareList; % Located in /Functions/Internal Functions/, returns list of current firmware
            obj.CurrentFirmware = cf;

            % Create timer objects
            obj.Timers = struct;
            obj.Timers.PortRelayTimer = timer('TimerFcn', 'UpdateSerialTerminals()',...
                'ExecutionMode', 'fixedRate', 'Period', 0.1);
            obj.Timers.AnalogTimer = timer('TimerFcn',@(h,e)obj.ProcessAnalogSamples(),...
                'ExecutionMode', 'fixedRate', 'Period', 0.1);
            obj.BpodSplashScreen(1);
        end

        function obj = resetSessionClock(obj)
            % Resets the state machine session clock, used for event and state timestamps.
            
            if obj.EmulatorMode == 0
                obj.SerialPort.write('*', 'uint8'); % Reset session clock
                confirmed = obj.SerialPort.read(1,'uint8');
                if confirmed ~= 1
                    error('Error: confirm not returned after resetting session clock.')
                end
            end
        end

        function obj = setupFolders(obj)
            % setupFolders() Launches a GUI for the user to set the locations of data and protocol folders
            % This is called from the settings menu's 'Folder' button

            if isfield(obj.GUIHandles, 'FolderConfigFig') && ~verLessThan('MATLAB', '8.4')
                if isgraphics(obj.GUIHandles.FolderConfigFig)
                    figure(obj.GUIHandles.FolderConfigFig);
                    return
                end
            end
            if ispc
                FigHeight = 130; Label1Ypos = 28; Label2Ypos = 68;
            else
                FigHeight = 150; Label1Ypos = 38; Label2Ypos = 75;
            end
            obj.GUIHandles.FolderConfigFig = figure('Position', [350 480 600 FigHeight],...
                'name', 'Setup folders', 'numbertitle', 'off', 'MenuBar', 'none', 'Resize', 'off');
            ha = axes('units','normalized', 'position',[0 0 1 1]);
            uistack(ha,'bottom');
            BG = imread('SettingsMenuBG2.bmp');
            imagesc(BG); axis off; drawnow;
            text(10, Label1Ypos,'Protocols','Parent', ha , 'FontName', 'OCRAStd', 'FontSize', 13, 'Color', [0.8 0.8 0.8]);
            text(10, Label2Ypos,'Data Root','Parent', ha , 'FontName', 'OCRAStd', 'FontSize', 13, 'Color', [0.8 0.8 0.8]);
            if isfield(obj.SystemSettings, 'ProtocolFolder')
                if isempty(obj.SystemSettings.ProtocolFolder)
                    protocolPath = fullfile(obj.Path.LocalDir, 'Protocols',filesep);
                else
                    protocolPath = obj.SystemSettings.ProtocolFolder;
                end
            else
                protocolPath = fullfile(obj.Path.LocalDir, 'Protocols',filesep);
            end
            if isfield(obj.SystemSettings, 'DataFolder')
                if isempty(obj.SystemSettings.DataFolder)
                    dataPath = fullfile(obj.Path.LocalDir, 'Data',filesep);
                else
                    dataPath = obj.SystemSettings.DataFolder;
                end
            else
                dataPath = fullfile(obj.Path.LocalDir, 'Data',filesep);
            end
            ImportButtonGFX = imread('ImportButton.bmp');
            obj.GUIHandles.setupFoldersButton = uicontrol(obj.GUIHandles.FolderConfigFig,...
                'Style', 'pushbutton',...
                'String', 'Ok',...
                'Position', [270 10 60 25],...
                'Callback', @(h,e)obj.setFolders(),...
                'BackgroundColor', [.4 .4 .4],...
                'ForegroundColor', [1 1 1]);
            obj.GUIHandles.dataFolderEdit = uicontrol(obj.GUIHandles.FolderConfigFig,...
                'Style', 'edit',...
                'String', dataPath,...
                'Position', [140 50 410 25],...
                'HorizontalAlignment', 'Left',...
                'BackgroundColor', [.8 .8 .8],...
                'FontSize', 10,...
                'FontName', 'Arial');
            obj.GUIHandles.dataFolderNav = uicontrol(obj.GUIHandles.FolderConfigFig,...
                'Style', 'pushbutton',...
                'String', '',...
                'Position', [560 50 25 25],...
                'BackgroundColor', [.8 .8 .8],...
                'CData', ImportButtonGFX,...
                'Callback', @(h,e)obj.folderSetupUIGet('Data'));
            obj.GUIHandles.protocolFolderEdit = uicontrol(obj.GUIHandles.FolderConfigFig,...
                'Style', 'edit',...
                'String', protocolPath,...
                'Position', [140 90 410 25],...
                'HorizontalAlignment', 'Left',...
                'BackgroundColor', [.8 .8 .8],...
                'FontSize', 10,...
                'FontName', 'Arial');
            obj.GUIHandles.protocolFolderNav = uicontrol(obj.GUIHandles.FolderConfigFig,...
                'Style', 'pushbutton',...
                'String', '',...
                'Position', [560 90 25 25],...
                'BackgroundColor', [.8 .8 .8],...
                'CData', ImportButtonGFX,...
                'Callback', @(h,e)obj.folderSetupUIGet('Protocol'));
        end

        function obj = folderSetupUIGet(obj, type)
            % folderSetupUIGet() is a callback function triggered by the "select folder" button on the setupFolders() GUI.
            % Arguments: type (char array) - a string indicating which folder type to select, 'Data' or 'Protocol'

            switch type
                case 'Data'
                    originalFolder = get(obj.GUIHandles.dataFolderEdit, 'String');
                    chosenFolder = uigetdir(obj.Path.LocalDir, 'Select Bpod data folder');
                    if chosenFolder == 0
                        chosenFolder = originalFolder;
                    end
                    set(obj.GUIHandles.dataFolderEdit, 'String', fullfile(chosenFolder, filesep));
                case 'Protocol'
                    originalFolder = get(obj.GUIHandles.protocolFolderEdit, 'String');
                    chosenFolder = uigetdir(obj.Path.LocalDir, 'Select Bpod protocol folder');
                    if chosenFolder == 0
                        chosenFolder = originalFolder;
                    end
                    set(obj.GUIHandles.protocolFolderEdit, 'String', fullfile(chosenFolder, filesep));
            end
        end

        function obj = setFolders(obj)
            % setFolders() is a callback function triggered by the 'Ok' button on the setupFolders() GUI.
            % It saves the selected data and protocol folders to the system settings file.

            dataFolder = get(obj.GUIHandles.dataFolderEdit, 'String');
            protocolFolder = get(obj.GUIHandles.protocolFolderEdit, 'String');
            if exist(dataFolder) == 0
                mkdir(dataFolder);
            end
            if exist(protocolFolder) == 0
                mkdir(protocolFolder);
            end
            contents = dir(protocolFolder);
            if length(contents) == 2
                choice = questdlg('Copy example protocols to new protocol folder?', ...
                    'Protocol folder is empty', ...
                    'Yes', 'No', 'No');
                if strcmp(choice, 'Yes')
                    copyfile(fullfile(obj.Path.BpodRoot, 'Examples', 'Protocols'), protocolFolder);
                end
            end
            obj.Path.ProtocolFolder = protocolFolder;
            obj.Path.DataFolder = dataFolder;
            obj.SystemSettings.ProtocolFolder = protocolFolder;
            obj.SystemSettings.DataFolder = dataFolder;
            obj.SaveSettings;
            close(obj.GUIHandles.FolderConfigFig);
        end

        function obj = Wiki(obj)
            % Launches the Bpod wiki
            % Triggered by the '?' button on the Bpod Console GUI
            if ispc || ismac
                web ('https://sanworks.github.io/Bpod_Wiki/', '-browser');
            else
                disp(['**NOTE** If MATLAB is running as root, your browser may fail to open. '...
                    'The wiki is at: https://sanworks.github.io/Bpod_Wiki/']);
                web ('https://sanworks.github.io/Bpod_Wiki/');
            end
        end

        function obj = SaveSettings(obj)
            % Saves the BpodObject.SystemSettings struct to the Bpod settings file
            BpodSettings = obj.SystemSettings;
            save(fullfile(obj.Path.LocalDir, 'Settings', 'BpodSettings.mat'), 'BpodSettings');
        end

        function obj = BeingUsed(obj)
            % A notice to the user for obsolete protocol syntax
            error('Error: "BpodSystem.BeingUsed" is now "BpodSystem.Status.BeingUsed" - Please update your protocol!')
        end

        function obj = setStatusLED(obj, status)
            % Enable/Disable the State Machine status LED. This is useful for experiments requiring
            % mitigation of ambient light sources. Requires state machine firmware v23 or newer
            % Arguments: status (int) 0 = disabled, 1 = enabled
            if obj.EmulatorMode == 0
                if obj.FirmwareVersion < 23
                    error('Error: status LED enable/disable requires firmware v23+');
                end
                if (status == 1) || (status == 0)
                    obj.SerialPort.write([':' status], 'uint8');
                    confirmed = obj.SerialPort.read(1, 'uint8');
                else
                    error('Error: LED status must be 0 (disabled) or 1 (enabled)')
                end
            end
        end

        function obj = SetStatusLED(obj, status)
            % A notice to the user for obsolete protocol syntax
            error('Case syntax error. setStatusLED needs a lowercase ''s''') % For users on the develop branch
        end

        function StartModuleRelay(obj, module)
            % BpodObject.StartModuleRelay sets the state machine to relay bytes arriving from a Bpod module to the PC.
            % While the relay is active, read incoming bytes with ModuleRead()
            % To disable the relay use BpodObject.StopModuleRelay(). The relay must be stopped before running a trial.
            %
            % Arguments: module, the module index (int) or name (char array). Module names are given in BpodObject.Modules.Name

            if ischar(module)
                moduleNum = find(strcmp(module, obj.Modules.Name));
            end
            if ~isempty(moduleNum)
                if (moduleNum <= length(obj.Modules.Connected))
                    if (sum(obj.Modules.RelayActive)) == 0
                        obj.SerialPort.write(['J' moduleNum-1 1], 'uint8');
                        obj.Modules.RelayActive(moduleNum) = 1;
                    else
                        error('Error: You must stop the active module relay with StopModuleRelay() before starting another one.')
                    end
                end
            end
        end

        function StopModuleRelay(obj, varargin)
            % Stops the active module relay
            for i = 1:length(obj.Modules.RelayActive)
                obj.SerialPort.write(['J' i 0], 'uint8');
            end
            runningState = get(obj.Timers.PortRelayTimer, 'Running');
            if strcmp(runningState, 'on')
                stop(obj.Timers.PortRelayTimer);
                while strcmp(runningState, 'on')
                    runningState = get(obj.Timers.PortRelayTimer, 'Running');
                    pause(.001);
                end
            end
            nAvailable = obj.SerialPort.bytesAvailable;
            if nAvailable > 0
                obj.SerialPort.read(nAvailable, 'uint8');
            end
            obj.Modules.RelayActive(1:end) = 0;
        end

        function set.FlexIOConfig(obj, config)
            % This method is called when BpodObject.FlexIOConfig is set. It
            % verifies the new config struct and updates the device.

            % Assert that config is struct
            if ~isstruct(config)
                error('Error setting FlexIOConfig: the configuration must be a struct.')
            end

            % Check for expected fields
            expectedFields = {'about','channelTypes', 'analogSamplingRate', 'nReadsPerSample','threshold1','threshold2',...
                'polarity1','polarity2','thresholdMode'}';
            providedFields = fields(config);
            if length(providedFields) > length(expectedFields)
                error(['Error setting FlexIOConfig: ''' providedFields{end} ''' is not a FlexIO Config property'])
            elseif length(providedFields) < length(expectedFields)
                error(['Error setting FlexIOConfig: incorrect number of fields provided'])
            end
            fieldMatch = strcmp(expectedFields, providedFields);
            mismatch = find(fieldMatch == 0, 1);
            if ~isempty(mismatch)
                error(['Error setting FlexIOConfig: expected field ' expectedFields(mismatch) ' was not provided.'])
            end

            configMessage = []; % Initialize byte message to configure FlexIO channels
            nAcks = 0;          % Number of acknowledgement bytes to read

            % Set channel types
            % ChannelTypes: 0 = DI, 1 = DO, 2 = ADC, 3 = DAC 4 = Disabled (Tri-State / High Z)
            if length(config.channelTypes) ~= obj.HW.n.FlexIO
                error(['Error using setFlexIO: the channelTypes vector must specify one type for each of the '...
                    num2str(obj.HW.n.FlexIO) ' FlexIO channels.']);
            end
            if (sum(config.channelTypes > 4) > 0) || (sum(config.channelTypes < 0) > 0)
                error(['Error using setFlexIO: invalid channel type specified. Valid channel types are: ' ...
                    '0 = DI, 1 = DO, 2 = ADC, 3 = DAC, 4 = Disabled']);
            end
            configMessage = uint8([configMessage 'Q' config.channelTypes]);
            nAcks = nAcks + 1;

            % Set FlexIO analog input sampling rate (Hz). Permitted range = [1, 1000]
            nCyclesPerSample = obj.HW.CycleFrequency/config.analogSamplingRate; % state machine cycles per analog sample
            if nCyclesPerSample < 10 || nCyclesPerSample > (obj.HW.CycleFrequency/10)
                error('Error configuring FlexIO analog input sampling rate: Rate must be in range [1, 1000]');
            end
            configMessage = uint8([configMessage '^' typecast(uint32(nCyclesPerSample), 'uint8')]);
            nAcks = nAcks + 1;

            % Set FlexIO ADC reads per sample
            if config.nReadsPerSample > 4 || config.nReadsPerSample < 1
                error('FlexIO readsPerSample must be in range [1, 4]')
            end
            configMessage = uint8([configMessage 'o' config.nReadsPerSample]);
            nAcks = nAcks + 1;

            % Set analog voltage thresholds
            if sum(config.threshold1 > 5) > 0 || sum(config.threshold1 < 0) > 0
                error('FlexIO threshold1 must be in range [0, 5] Volts')
            end
            if sum(config.threshold2 > 5) > 0 || sum(config.threshold2 < 0) > 0
                error('FlexIO threshold2 must be in range [0, 5] Volts')
            end
            thresholdBits1 = (config.threshold1/5)*4095;
            thresholdBits2 = (config.threshold1/5)*4095;
            configMessage = uint8([configMessage 't' typecast(uint16([thresholdBits1 thresholdBits2]), 'uint8')]);
            nAcks = nAcks + 1;

            % Set analog threshold polarity
            if sum(config.polarity1 < 0) > 0 || sum(config.polarity1 > 1) > 0
                error('FlexIO polarity1 must be in range [0, 1]')
            end
            if sum(config.polarity2 < 0) > 0 || sum(config.polarity2 > 1) > 0
                error('FlexIO polarity2 must be in range [0, 1]')
            end
            configMessage = uint8([configMessage 'p' config.polarity1 config.polarity2]);
            nAcks = nAcks + 1;

            % Set analog threshold mode
            if sum(config.thresholdMode < 0) > 0 || sum(config.thresholdMode > 1) > 0
                error('FlexIO thresholdMode must be in range [0, 1]')
            end
            configMessage = uint8([configMessage 'm' config.thresholdMode]);
            nAcks = nAcks + 1;

            % Send FlexIO Config to device and receive ACK
            if obj.Status.InStateMatrix
                error('Error: FlexIO channels cannot be reconfigured while the state machine is running.');
            end
            obj.SerialPort.write(configMessage, 'uint8');
            ok = obj.SerialPort.read(nAcks, 'uint8');
            if sum(ok) ~= length(ok) || isempty(ok)
                error('Error configuring FlexIO channels: confirm code not returned');
            end

            % Update registries of behavior events and outputs
            if sum(obj.HW.FlexIO_ChannelTypes == config.channelTypes) < obj.HW.n.FlexIO
                obj.HW.FlexIO_ChannelTypes = config.channelTypes;
                obj.HW.FlexIO_SamplingRate = config.analogSamplingRate;
                inputChannelNames = cell(1,obj.HW.n.FlexIO);
                outputChannelNames = cell(1,obj.HW.n.FlexIO);
                flexEventPos = obj.HW.Pos.Event_FlexIO;
                flexInputPos = obj.HW.Pos.Input_FlexIO;
                flexOutputPos = obj.HW.Pos.Output_FlexIO;
                for i = 1:obj.HW.n.FlexIO
                    switch config.channelTypes(i)
                        case 0
                            inputChannelNames{i} = ['Flex' num2str(i)];
                            outputChannelNames{i} = '---';
                            obj.StateMachineInfo.EventNames{flexEventPos} = [inputChannelNames{i} 'High'];
                            obj.StateMachineInfo.EventNames{flexEventPos+1} = [inputChannelNames{i} 'Low'];
                            flexEventPos = flexEventPos + 2;
                        case 1
                            inputChannelNames{i} = '---';
                            outputChannelNames{i} = ['Flex' num2str(i) 'DO'];
                            obj.StateMachineInfo.EventNames{flexEventPos} = '---';
                            obj.StateMachineInfo.EventNames{flexEventPos+1} = '---';
                            flexEventPos = flexEventPos + 2;
                        case 2
                            inputChannelNames{i} = ['Flex' num2str(i)];
                            outputChannelNames{i} = '---';
                            obj.StateMachineInfo.EventNames{flexEventPos} = [inputChannelNames{i} 'Trig1'];
                            obj.StateMachineInfo.EventNames{flexEventPos+1} = [inputChannelNames{i} 'Trig2'];
                            flexEventPos = flexEventPos + 2;
                        case 3
                            inputChannelNames{i} = '---';
                            outputChannelNames{i} = ['Flex' num2str(i) 'AO'];
                            obj.StateMachineInfo.EventNames{flexEventPos} = '---';
                            obj.StateMachineInfo.EventNames{flexEventPos+1} = '---';
                            flexEventPos = flexEventPos + 2;
                        case 4
                            inputChannelNames{i} = '---';
                            outputChannelNames{i} = '---';
                            obj.StateMachineInfo.EventNames{flexEventPos} = '---';
                            obj.StateMachineInfo.EventNames{flexEventPos+1} = '---';
                            flexEventPos = flexEventPos + 2;
                    end
                end
                obj.StateMachineInfo.InputChannelNames(flexInputPos:flexInputPos+obj.HW.n.FlexIO-1) = inputChannelNames;
                obj.StateMachineInfo.OutputChannelNames(flexOutputPos:flexOutputPos+obj.HW.n.FlexIO-1) = outputChannelNames;
            end
            if isfield (obj.Data, 'Analog')
                obj.Data.Analog.nChannels = sum(config.channelTypes == 2);
                obj.Data.Analog.channelNumbers = find(config.channelTypes == 2);
            end
            obj.FlexIOConfig = config;
        end

        function PhoneHomeOpt_In_Out(obj)
            % Launches a GUI for registration with the Bpod Phone Home program
            obj.GUIHandles.BpodPhoneHomeFig = figure('Position', [550 180 400 350],...
                'name','Bpod Phone Home','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');
            ha = axes('units','normalized', 'position',[0 0 1 1]);
            uistack(ha,'bottom');
            bg = imread('PhoneHomeBG.bmp');
            image(bg); axis off; drawnow;
            text(20, 40,'Bpod PhoneHome Program', 'FontName', 'Courier New', 'FontSize', 16, 'Color', [1 1 1]);
            Pos = 80; Step = 25;
            text(20, Pos,'Bpod PhoneHome is an opt-in', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            text(20, Pos,'program to send anonymous data', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            text(20, Pos,'about your Bpod software setup', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            text(20, Pos,'to Sanworks LLC on Bpod start.', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            text(20, Pos,'This will help us understand', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            text(20, Pos,'which MATLAB versions and OS', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            text(20, Pos,'flavors typically run Bpod', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            text(20, Pos,'+ how many rigs are out there.', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step+5;
            text(140, Pos,'See BpodPhoneHome.m', 'FontName', 'Courier New', 'FontSize', 12, 'Color', [1 1 1]); Pos = Pos + Step;
            BpodSystem.GUIHandles.PhoneHomeAcceptBtn = uicontrol('Style', 'pushbutton', 'String', 'Ok',...
                'Position', [130 15 120 40], 'Callback', @(h,e)obj.phoneHomeRegister(1),...
                'FontSize', 12,'Backgroundcolor',[0.29 0.29 0.43],'Foregroundcolor',[0.9 0.9 0.9], 'FontName', 'Courier New');
            BpodSystem.GUIHandles.PhoneHomeAcceptBtn = uicontrol('Style', 'pushbutton', 'String', 'Decline',...
                'Position', [260 15 120 40], 'Callback', @(h,e)obj.phoneHomeRegister(0),...
                'FontSize', 12,'Backgroundcolor',[0.29 0.29 0.43],'Foregroundcolor',[0.9 0.9 0.9], 'FontName', 'Courier New');
        end

        function onlineStatus = check4Internet(obj)
            % Check for Internet connectivity
            % Returns: onlineStatus (double) = 1 if online, 0 if not
            if ispc
                [~,reply]=system('ping -n 1 -w 1000 www.google.com'); % Check for connection
                ConnectConfirmString = 'Received = 1';
            elseif ismac
                [~,reply]=system('trap -SIGALRM; ping -c 1 -t 1 www.google.com'); % Check for connection
                ConnectConfirmString = '1 packets received';
            else
                [~,reply]=system('timeout 1 ping -c 1 www.google.com'); % Check for connection
                ConnectConfirmString = '1 received';
            end
            onlineStatus = 0;
            if ~isempty(strfind(reply, ConnectConfirmString)) %#ok contains() requires r2016b but Bpod supports back to r2013a
                onlineStatus = 1;
            end
        end

        function startAnalogViewer(obj)
            obj.analogViewer('init', []);
        end

        function delete(obj)
            % Destructor
            obj.SerialPort = []; % Trigger the ArCOM port's destructor function (closes and releases port)
            if obj.MachineType > 3 && obj.FirmwareVersion > 22
                obj.AnalogSerialPort = [];
            end
        end
    end

    methods (Access = private)
        function phoneHomeRegister(obj, state)
            % Callback from pushbutton of PhoneHomeOpt_In_Out() GUI
            % Registers user with the Bpod Phone Home program
            if ~isfield(obj.SystemSettings, 'PhoneHomeRigID')
                obj.SystemSettings.PhoneHomeRigID = char(floor(rand(1,16)*25)+65);
            end
            switch state
                case 0
                    obj.SystemSettings.PhoneHome = 0;
                    obj.BpodPhoneHome('Opt_Out');
                case 1
                    obj.SystemSettings.PhoneHome = 1;
                    obj.BpodPhoneHome(0);
            end
            obj.SaveSettings;
            close(obj.GUIHandles.BpodPhoneHomeFig);
        end

        function SwitchPanels(obj, panel)
            % Callback triggered when switching between module tabs on the Bpod Console GUI
            % Arguments: panel, the index of the panel selected
            obj.GUIData.CurrentPanel = 0;
            offPanels = 1:obj.HW.n.UartSerialChannels+1;
            offPanels = offPanels(offPanels~=panel);
            set(obj.GUIHandles.OverridePanel(panel), 'Visible', 'on');
            uistack(obj.GUIHandles.OverridePanel(panel), 'top');
            for i = offPanels
                % Button -> gray
                set(obj.GUIHandles.PanelButton(i), 'BackgroundColor', [0.37 0.37 0.37]);
                set(obj.GUIHandles.OverridePanel(i), 'Visible', 'off');
            end
            set(obj.GUIHandles.PanelButton(panel), 'BackgroundColor', [0.45 0.45 0.45]);
            if isempty(strfind(obj.HostOS, 'Linux')) && ~verLessThan('matlab', '8.0.0') && verLessThan('matlab', '9.5.0')
                for i = 1:obj.HW.n.UartSerialChannels+1
                    jButton = findjobj(obj.GUIHandles.PanelButton(i));
                    jButton.setBorderPainted(false);
                end
            end
            obj.GUIData.CurrentPanel = panel;
            if obj.EmulatorMode == 0
                % Set module byte stream relay to current module
                obj.StopModuleRelay;
                if panel > 1
                    if obj.Status.BeingUsed == 0 && obj.GUIData.DefaultPanel(panel) == 1
                        obj.SerialPort.write(['J' panel-2 1], 'uint8');
                        obj.Modules.RelayActive(panel-1) = 1;
                        % Start timer to scan port
                        start(obj.Timers.PortRelayTimer);
                    end
                end
            end
            obj.FixPushbuttons;
        end

        function FixPushbuttons(obj)
            % Remove all the nasty borders around pushbuttons on platforms besides win7
            if isempty(strfind(obj.HostOS, 'Windows 7'))
                warning off
                handles = findjobj('class', 'pushbutton');
                set(handles, 'border', []);
                warning on
            end
        end

        function BpodSplashScreen(obj, stage)
            % Create / Update the Bpod splash screen, shown on startup
            % Arguments: stage, the index of the startup stage (1-5)
            if stage == 1
                ySize = 970;
                xSize = 600;
                if ~isunix && ~verLessThan('matlab', '9') % Image scaling was not as graceful in prior MATLAB
                    ySize = floor(ySize*0.5);
                    xSize = floor(xSize*0.5);
                end
                SS = get(0,'screensize');
                yOffset = round((SS(4)/2))-(xSize/2);
                xOffset = round((SS(3)/2))-(ySize/2);
                obj.GUIHandles.SplashFig = figure('Position',[xOffset yOffset ySize xSize],'name','Bpod',...
                    'numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');
                ha = axes('units','normalized', 'position',[0 0 1 1]);
                uistack(ha,'bottom');
            end
            img = obj.SplashData(:,:,:,stage);
            img(540:548, 86:885,:) = ones(9,800,3)*160;
            startPos = 86;
            endPos = 87;
            StepSize = 5;
            if ~verLessThan('matlab', '9')
                StepSize = 10;
            end
            switch stage
                case 1
                    while endPos < 246
                        endPos = endPos + StepSize;
                        img(540:548, startPos:endPos,1) = ones(9,(endPos-(startPos-1)),1)*200;
                        img(540:548, startPos:endPos,2) = ones(9,(endPos-(startPos-1)),1)*30;
                        img(540:548, startPos:endPos,3) = ones(9,(endPos-(startPos-1)),1)*30;
                        imagesc(img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none',...
                            'Resize', 'off'); axis off; drawnow;
                    end
                case 2
                    endPos = 246;
                    while endPos < 406
                        endPos = endPos + StepSize;
                        img(540:548, startPos:endPos,1) = ones(9,(endPos-(startPos-1)),1)*200;
                        img(540:548, startPos:endPos,2) = ones(9,(endPos-(startPos-1)),1)*30;
                        img(540:548, startPos:endPos,3) = ones(9,(endPos-(startPos-1)),1)*30;
                        imagesc(img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none',...
                            'Resize', 'off'); axis off; drawnow;
                    end
                case 3
                    endPos = 406;
                    while endPos < 566
                        endPos = endPos + StepSize;
                        img(540:548, startPos:endPos,1) = ones(9,(endPos-(startPos-1)),1)*200;
                        img(540:548, startPos:endPos,2) = ones(9,(endPos-(startPos-1)),1)*30;
                        img(540:548, startPos:endPos,3) = ones(9,(endPos-(startPos-1)),1)*30;
                        imagesc(img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none',...
                            'Resize', 'off'); axis off; drawnow;
                    end
                case 4
                    endPos = 566;
                    while endPos < 726
                        endPos = endPos + StepSize;
                        img(540:548, startPos:endPos,1) = ones(9,(endPos-(startPos-1)),1)*200;
                        img(540:548, startPos:endPos,2) = ones(9,(endPos-(startPos-1)),1)*30;
                        img(540:548, startPos:endPos,3) = ones(9,(endPos-(startPos-1)),1)*30;
                        imagesc(img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none',...
                            'Resize', 'off'); axis off; drawnow;
                    end
                case 5
                    endPos = 726;
                    while endPos < 886
                        endPos = endPos + StepSize;
                        img(540:548, startPos:endPos,1) = ones(9,(endPos-(startPos-1)),1)*200;
                        img(540:548, startPos:endPos,2) = ones(9,(endPos-(startPos-1)),1)*30;
                        img(540:548, startPos:endPos,3) = ones(9,(endPos-(startPos-1)),1)*30;
                        imagesc(img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none',...
                            'Resize', 'off'); axis off; drawnow;
                    end
                    pause(.5);
            end
        end
    end
end